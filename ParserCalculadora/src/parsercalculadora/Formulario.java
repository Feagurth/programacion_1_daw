/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parsercalculadora;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Super
 */
public class Formulario extends javax.swing.JFrame {

    /**
     * Creates new form Formulario
     */
    public Formulario() {
        initComponents();
        jButton1ActionPerformed(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTextField1.setText("14+1*2+((3*4)-1)");

        jButton1.setText("Go!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextField1.setText(parser(jTextField1.getText()));
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private String parser(String cadena) {

        BigDecimal numero1 = BigDecimal.ZERO;

        int pos1;
        int pos2 = 0;
        int pos3 = 0;

        String operaciones[] = {"(", ")", "*", "/", "+", "-"};
        cadena = cadena.replace(" ", "");
        ArrayList valor = cadenaALista(cadena, operaciones);

        do {
            for (String operacion : operaciones) {

                do {
                    if (valor.contains(operacion)) {

                        switch (operacion) {
                            case "(": {

                                pos1 = valor.lastIndexOf(operacion);
                                pos2 = pos1;
                                pos3 = pos1 + 1 + buscarOperacion(valor.subList(pos1 + 1, valor.size()), new String[]{")"}, true);

                                numero1 = new BigDecimal(parser(listaACadena(valor.subList(pos2 + 1, pos3))));

                                break;
                            }

                            case "+": {
                                pos1 = valor.indexOf(operacion);
                                pos2 = buscarOperacion(valor.subList(0, pos1), operaciones, false) + 1;
                                pos3 = pos1 + buscarOperacion(valor.subList(pos1 + 1, valor.size()), operaciones, true);

                                numero1 = new BigDecimal(valor.get(pos2).toString());
                                numero1 = numero1.add(new BigDecimal(valor.get(pos3).toString()));
                                break;
                            }
                            case "-": {
                                pos1 = valor.indexOf(operacion);
                                pos2 = buscarOperacion(valor.subList(0, pos1), operaciones, false) + 1;
                                pos3 = pos1 + buscarOperacion(valor.subList(pos1 + 1, valor.size()), operaciones, true);

                                numero1 = new BigDecimal(valor.get(pos2).toString());
                                numero1 = numero1.subtract(new BigDecimal(valor.get(pos3).toString()));
                                break;
                            }
                            case "*": {
                                pos1 = valor.indexOf(operacion);
                                pos2 = buscarOperacion(valor.subList(0, pos1), operaciones, false) + 1;
                                pos3 = pos1 + buscarOperacion(valor.subList(pos1 + 1, valor.size()), operaciones, true);

                                numero1 = new BigDecimal(valor.get(pos2).toString());
                                numero1 = numero1.multiply(new BigDecimal(valor.get(pos3).toString()));
                                break;
                            }
                            case "/": {
                                pos1 = valor.indexOf(operacion);
                                pos2 = buscarOperacion(valor.subList(0, pos1), operaciones, false) + 1;
                                pos3 = pos1 + buscarOperacion(valor.subList(pos1 + 1, valor.size()), operaciones, true);

                                numero1 = new BigDecimal(valor.get(pos2).toString());
                                numero1 = numero1.divide(new BigDecimal(valor.get(pos3).toString()), 20, RoundingMode.HALF_DOWN);
                                break;
                            }
                        }

                        valor.set(pos2, numero1.toString());
                        valor.subList(pos2 + 1, pos3 + 1).clear();
                        valor.trimToSize();

                    }
                } while (valor.contains(operacion));
            }
        } while (!Collections.disjoint(valor, Arrays.asList(operaciones)));

        return valor.get(0).toString();
    }

    private static String listaACadena(List lista) {
        String cadena = "";

        for (Object object : lista) {
            cadena = cadena.concat(object + "");
        }

        return cadena;
    }

    private static ArrayList cadenaALista(String valor, String[] operaciones) {
        ArrayList<String> chars = new ArrayList<>();
        String cadena = "";
        for (char c : valor.toCharArray()) {
            if (Arrays.asList(operaciones).contains(c + "")) {

                if (!cadena.equals("")) {
                    chars.add(cadena);
                }

                cadena = "";
                chars.add(c + "");
            } else {
                cadena = cadena.concat(c + "");
            }
        }
        if (!cadena.equals("")) {
            chars.add(cadena);
        }
        return chars;
    }

    private static int buscarOperacion(List valores, String[] operaciones, boolean izqDer) {
        int salida = (izqDer ? valores.size() : 0);

        for (String operacion : operaciones) {

            if (!izqDer) {
                if (salida < valores.lastIndexOf(operacion)) {
                    salida = valores.lastIndexOf(operacion);
                }
            } else {
                if (valores.indexOf(operacion) != -1) {
                    if (salida > valores.indexOf(operacion)) {

                        salida = valores.indexOf(operacion);
                    }
                }
            }

        }

        return (salida == 0 ? -1 : salida);
    }

}
