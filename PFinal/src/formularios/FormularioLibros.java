/*
 * Copyright (C) 2014 Luis Cabrerizo Gómez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package formularios;

import datos.BaseDeDatos;
import datos.Libro;
import datos.Resultado;
import googlebooks.GoogleBooks;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import utiles.Mensajes;
import utiles.Utiles;
import utiles.Validaciones;

/**
 * Enumerador para los distintos modos de edición del formulario
 *
 * @author Luis Cabrerizo Gómez
 */
enum ModoEdicion {

    /**
     * Valor para el modo de añadir del formulario
     */
    AÑADIR,
    /**
     * Valor para el modo de modificación del formulario
     */
    MODIFICAR,
    /**
     * Valor para el modo de lectura del formulario
     */
    LECTURA
};

/**
 * Clase para la creación del formulario de libros
 *
 * @author Luis Cabrerizo Gómez
 */
public class FormularioLibros extends javax.swing.JInternalFrame {

    private final BaseDeDatos baseDatos;
    private ModoEdicion modo = ModoEdicion.LECTURA;
    private Libro libro;

    /**
     * Constructor de la clase
     *
     * @param libro Objeto libro con la información a mostrar del libro
     */
    public FormularioLibros(Libro libro) {

        // Inicializamos los componentes que forman parte del formulario
        initComponents();

        // Oculatamos la etiqueta de Ids de autores, donde almacenaremos los
        // valores para su uso posterior
        lblIdAutores.setVisible(false);

        // Ocultamos la etiqueta donde almacenaremos la representación
        // de la carátula en bytes
        lblBytesCaratula.setVisible(false);

        // Guardamos el valor del parámetro en la variable de instancia
        this.libro = libro;

        // Creamos una nueva conexión con la base de datos
        baseDatos = new BaseDeDatos("root", "", "127.0.0.1:3306", "libros");

        // Ocultamos los botones de aceptar y de cancelar
        btnAceptar.setVisible(false);
        btnCancelar.setVisible(false);

        // Si el parámetro no es nulo rellenamos los campos con sus valores
        // Solo se puede llamar a esta pantalla con valores desde la pantalla
        // de biblioteca para mirar el resto de información del libro, por tanto
        // inicialmente no activamos la edición
        if (libro != null) {
            rellenarCampos(libro);
            activarEdicion(false);
            this.modo = ModoEdicion.LECTURA;
        } else {

            // En caso de que no tenga valor el parámetro, se ha llamado a la
            // pantalla desde el menú lateral, por tanto ponemos los campos
            // vacios y activamos la edición en modo añadir
            rellenarCampos(null);
            activarEdicion(true);
            this.modo = ModoEdicion.AÑADIR;
        }
    }

    /**
     * Método que permite modificar los controles del formulario para poder
     * editar valores o añadir registros
     *
     * @param edicion Verdadero para activar el modo edición, falso para
     * desactivarlo
     */
    private void activarEdicion(boolean edicion) {

        // Modificamos la editabilidad y visibilidad de los controles 
        // dependiendo del modo de edición que hayamos especificado
        txtAnyo.setEditable(edicion);
        txtEdicion.setEditable(edicion);
        txtEditorial.setEditable(edicion);
        txtISBN.setEditable(edicion);
        txtTitulo.setEditable(edicion);
        btnBrowseAutores.setEnabled(edicion);
        txtaResumen.setEnabled(edicion);

        txtBuscarISBN.setEnabled(edicion);
        btnBuscarISBN.setEnabled(edicion);

        btnAñadir.setVisible(!edicion);
        btnModificar.setVisible(!edicion);
        btnEliminar.setVisible(!edicion);

        btnAceptar.setVisible(edicion);
        btnCancelar.setVisible(edicion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPrincipal = new javax.swing.JPanel();
        txtBuscarISBN = new javax.swing.JTextField();
        btnBuscarISBN = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        txtISBN = new javax.swing.JTextField();
        lblIsbn = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        lblTitulo = new javax.swing.JLabel();
        txtAutor = new javax.swing.JTextField();
        lblAutor = new javax.swing.JLabel();
        txtAnyo = new javax.swing.JTextField();
        lblAnyo = new javax.swing.JLabel();
        txtEditorial = new javax.swing.JTextField();
        lblEditorial = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaResumen = new javax.swing.JTextArea();
        cmbGenero = new javax.swing.JComboBox();
        lblGenero = new javax.swing.JLabel();
        txtEdicion = new javax.swing.JTextField();
        lblEdicion = new javax.swing.JLabel();
        btnBrowseAutores = new javax.swing.JButton();
        lblCaratula = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        lblIdAutores = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        lblBytesCaratula = new javax.swing.JLabel();

        setToolTipText("Haga doble click para seleccionar una caráula");
        setMaximumSize(new java.awt.Dimension(446, 532));
        setMinimumSize(new java.awt.Dimension(446, 532));
        setName("framePrincipal"); // NOI18N

        txtBuscarISBN.setEnabled(false);

        btnBuscarISBN.setText("Buscar ISBN");
        btnBuscarISBN.setEnabled(false);
        btnBuscarISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarISBNActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtISBN.setEditable(false);
        txtISBN.setAutoscrolls(false);
        txtISBN.setMaximumSize(new java.awt.Dimension(162, 25));
        txtISBN.setMinimumSize(new java.awt.Dimension(162, 25));
        txtISBN.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(txtISBN, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 84, -1, -1));

        lblIsbn.setText("ISBN");
        jPanel2.add(lblIsbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 89, 47, -1));

        txtTitulo.setEditable(false);
        txtTitulo.setAutoscrolls(false);
        txtTitulo.setMaximumSize(new java.awt.Dimension(162, 25));
        txtTitulo.setMinimumSize(new java.awt.Dimension(162, 25));
        txtTitulo.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(txtTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 20, -1, 27));

        lblTitulo.setText("Título");
        jPanel2.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 26, 49, -1));

        txtAutor.setEditable(false);
        txtAutor.setAutoscrolls(false);
        txtAutor.setMaximumSize(new java.awt.Dimension(127, 25));
        txtAutor.setMinimumSize(new java.awt.Dimension(127, 25));
        txtAutor.setPreferredSize(new java.awt.Dimension(127, 25));
        jPanel2.add(txtAutor, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 53, -1, -1));

        lblAutor.setText("Autor");
        jPanel2.add(lblAutor, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 58, 45, -1));

        txtAnyo.setEditable(false);
        txtAnyo.setAutoscrolls(false);
        txtAnyo.setMaximumSize(new java.awt.Dimension(162, 25));
        txtAnyo.setMinimumSize(new java.awt.Dimension(162, 25));
        txtAnyo.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(txtAnyo, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 115, -1, -1));

        lblAnyo.setText("Año");
        jPanel2.add(lblAnyo, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 120, 49, -1));

        txtEditorial.setEditable(false);
        txtEditorial.setAutoscrolls(false);
        txtEditorial.setMaximumSize(new java.awt.Dimension(162, 25));
        txtEditorial.setMinimumSize(new java.awt.Dimension(162, 25));
        txtEditorial.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(txtEditorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 146, -1, -1));

        lblEditorial.setText("Editorial");
        jPanel2.add(lblEditorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 151, 49, -1));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Resumen"));

        txtaResumen.setColumns(5);
        txtaResumen.setLineWrap(true);
        txtaResumen.setWrapStyleWord(true);
        txtaResumen.setBorder(null);
        txtaResumen.setEnabled(false);
        jScrollPane1.setViewportView(txtaResumen);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 380, 180));

        cmbGenero.setEnabled(false);
        cmbGenero.setFocusable(false);
        cmbGenero.setMaximumSize(new java.awt.Dimension(162, 25));
        cmbGenero.setMinimumSize(new java.awt.Dimension(162, 25));
        cmbGenero.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(cmbGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 208, -1, -1));

        lblGenero.setText("Género");
        jPanel2.add(lblGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 213, 49, -1));

        txtEdicion.setEditable(false);
        txtEdicion.setAutoscrolls(false);
        txtEdicion.setMaximumSize(new java.awt.Dimension(162, 25));
        txtEdicion.setMinimumSize(new java.awt.Dimension(162, 25));
        txtEdicion.setPreferredSize(new java.awt.Dimension(162, 25));
        jPanel2.add(txtEdicion, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 177, -1, -1));

        lblEdicion.setText("Edición");
        jPanel2.add(lblEdicion, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 182, 49, -1));

        btnBrowseAutores.setText("...");
        btnBrowseAutores.setEnabled(false);
        btnBrowseAutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseAutoresActionPerformed(evt);
            }
        });
        jPanel2.add(btnBrowseAutores, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 53, 29, -1));

        lblCaratula.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaratula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/no_book.png"))); // NOI18N
        lblCaratula.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblCaratula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCaratulaMouseClicked(evt);
            }
        });
        jPanel2.add(lblCaratula, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 14, 144, 219));

        btnAceptar.setText("    Aceptar   ");
        btnAceptar.setOpaque(false);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        lblIdAutores.setEnabled(false);
        lblIdAutores.setFocusable(false);
        lblIdAutores.setInheritsPopupMenu(false);
        lblIdAutores.setRequestFocusEnabled(false);
        lblIdAutores.setVerifyInputWhenFocusTarget(false);

        btnCancelar.setText("   Cancelar   ");
        btnCancelar.setOpaque(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnModificar.setText("   Modificar  ");
        btnModificar.setOpaque(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("   Eliminar   ");
        btnEliminar.setOpaque(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAñadir.setText("    Añadir    ");
        btnAñadir.setOpaque(false);
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        lblBytesCaratula.setEnabled(false);
        lblBytesCaratula.setFocusable(false);
        lblBytesCaratula.setInheritsPopupMenu(false);
        lblBytesCaratula.setRequestFocusEnabled(false);
        lblBytesCaratula.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlPrincipalLayout = new javax.swing.GroupLayout(pnlPrincipal);
        pnlPrincipal.setLayout(pnlPrincipalLayout);
        pnlPrincipalLayout.setHorizontalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlPrincipalLayout.createSequentialGroup()
                        .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIdAutores)
                            .addComponent(lblBytesCaratula))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAceptar)
                            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                                .addComponent(btnAñadir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModificar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlPrincipalLayout.createSequentialGroup()
                        .addComponent(txtBuscarISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPrincipalLayout.setVerticalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarISBN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdAutores)
                    .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnModificar)
                        .addComponent(btnAñadir)
                        .addComponent(btnEliminar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAceptar)
                        .addComponent(lblBytesCaratula))
                    .addComponent(btnCancelar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento para la pulsación del botón de buscar ISBN por internet
     *
     * @param evt Evento
     */
    private void btnBuscarISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarISBNActionPerformed

        try {

            // Limpiamos espacios en blanco y guiones y pasamos a mayúsculas
            txtBuscarISBN.setText(txtBuscarISBN.getText().replace(" ", "").replace("-", "").toUpperCase(Locale.getDefault()));

            // Comprobamos que hay texto introducido en el cuado de búsqueda
            // de ISBN y que es un ISBN
            if (!txtBuscarISBN.getText().equals("")
                    && Validaciones.validarDato(txtBuscarISBN.getText(), Validaciones.TipoValidacion.ISBN)) {

                // Creamos un nuevo objeto Libro para almacenar los resultados
                Libro libroISBN;

                // Realizamos la consulta y almacenamos el resultado
                libroISBN = GoogleBooks.query(txtBuscarISBN.getText());

                if (libroISBN != null) {
                    rellenarCampos(libroISBN);
                }

            } else {
                // Avisamos que el usuario debe introducir un ISBN
                Mensajes.mostrarMensaje("Debe introducir un ISBN", Mensajes.TipoMensaje.AVISO);
            }
        } catch (UnsupportedEncodingException ex) {
            // Mostramos un mensaje de error en caso de haber una excepción
            Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
        } catch (IOException | SQLException ex) {
            // Mostramos un mensaje de error en caso de haber una excepción
            Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
        }
    }//GEN-LAST:event_btnBuscarISBNActionPerformed

    /**
     * Método que nos permite validar la corrección de los datos introducidos en
     * el formulario
     *
     * @return Una cadena vacía si todo es correcto y mensajes para mostrar al
     * usuario en caso contrario
     */
    private String validarDatos() {

        String errores = "";

        // Comprobamos que el titulo se puedan introducir letras, números y algunos símbolos especiales
        if (!Validaciones.validarDato(txtTitulo.getText(), Validaciones.TipoValidacion.CADENA_NUMEROS_SIMBOLOS)) {
            errores = errores.concat("Titulo: Carácteres erróneos;");
        }

        // Comprobamos que el título no exceda el tamaño asignado para el campo
        // en la base de datos
        if (txtTitulo.getText().length() > 100) {
            errores = errores.concat("Título: Introduzca un máximo de 100 carácteres;");
        }

        // Comprobamos que al menos hemos seleccionado un autor
        // Para libros con autores anónimos, habrá que crear un autor específico
        // para hacer referencia a este caso especial
        if (lblIdAutores.getText().equals("")) {
            errores = errores.concat("Autor: Seleccione al menos un autor para el libro;");
        }

        // Comprobamos que en el isbn solo se puedan introducir números
        if (!Validaciones.validarDato(txtISBN.getText(), Validaciones.TipoValidacion.ISBN)) {
            errores = errores.concat("ISBN: valor inválido;");
        }

        // Comprobamos que el año es un número
        if (!Validaciones.validarDato(txtAnyo.getText(), Validaciones.TipoValidacion.CADENA_SOLO_NUMEROS)) {
            errores = errores.concat("Año: Introduzca un número positivo;");
        }

        // Comprobamos que el año del copyright no exceda el tamaño asignado 
        // para el campo en la base de datos
        if (txtAnyo.getText().length() != 4) {
            errores = errores.concat("Año: Introduzca 4 dígitos;");
        }

        // Comprobamos que el editorial se puedan introducir letras, números y algunos símbolos especiales
        if (!Validaciones.validarDato(txtEditorial.getText(), Validaciones.TipoValidacion.CADENA_NUMEROS_SIMBOLOS)) {
            errores = errores.concat("Editorial: Carácteres erróneos;");
        }

        // Comprobamos que la editorial no exceda el tamaño asignado para el campo
        // en la base de datos
        if (txtEditorial.getText().length() > 50) {
            errores = errores.concat("Editorial: Introduzca un máximo de 50 carácteres;");
        }

        // Comprobamos que el número de edición es un digito positivo distinto de 0
        if (!Validaciones.validarDato(txtEdicion.getText(), Validaciones.TipoValidacion.ENTERO_POSITIVO_NO_0)) {
            errores = errores.concat("Edición: Introduzca un número positivo;");
        }

        // Comprobamos que la edición no exceda el tamaño asignado para el campo
        // en la base de datos
        if (txtEdicion.getText().length() > 11) {
            errores = errores.concat("Edición: Introduzca un máximo de 11 carácteres;");
        }

        // Comprobamos que el resumen se puedan introducir letras, números y algunos símbolos especiales
        if (!txtaResumen.getText().equals("")) {
            if (!Validaciones.validarDato(txtaResumen.getText(), Validaciones.TipoValidacion.CADENA_NUMEROS_SIMBOLOS)) {
                errores = errores.concat("Resumen: Carácteres erróneos;");
            }
        }

        // Comprobamos que el resumen no exceda el tamaño asignado 
        // para el campo en la base de datos
        if (txtaResumen.getText().length() > 1000) {
            errores = errores.concat("Resumen: Introduzca un máximo de 1000 carácteres;");
        }

        // Devolvemos el resultado de la validación
        return errores.replace(";", "%n");
    }

    /**
     * Evento de pulsación del botón de aceptar
     *
     * @param evt Evento
     */
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        // Limpiamos espacios en blanco y guiones y pasamos a mayúsculas
        txtISBN.setText(txtISBN.getText().replace(" ", "").replace("-", "").toUpperCase(Locale.getDefault()));

        // Verificamos los datos introducidos y guardamos la respuesta
        // en una variable
        String errores = validarDatos();

        // Comprobamos la variable por si contiene errores
        if (errores.equals("")) {

            // Si son correctos, creamos nuevo objeto libro con los datos 
            // introducidos y lo asignamos a la variable de instancia
            this.libro = new Libro(txtISBN.getText(),
                    txtTitulo.getText(),
                    Integer.parseInt(txtEdicion.getText()),
                    txtEditorial.getText(),
                    txtAnyo.getText(),
                    lblIdAutores.getText().split(","),
                    txtaResumen.getText(),
                    lblBytesCaratula.getText());

            // Si el modo del formulario es de añadir
            if (modo == ModoEdicion.AÑADIR) {

                // Insertamos el libro en la base de datos, almacenando el resultado
                // en una variable a tal efecto
                Resultado datos = baseDatos.insertarLibro(libro);

                // Comprobamos si la operación es correcta
                if (datos.isOperacionCorrecta()) {

                    // Si lo es, mostramos un mensaje
                    Mensajes.mostrarMensaje("El libro se ha insertado correctamente",
                            Mensajes.TipoMensaje.INFORMACION);

                } else {
                    // Si hay un error mostramos un mensaje a tal efecto y 
                    // anulamos la variable de instancia
                    Mensajes.mostrarMensaje(datos.getMensaje(),
                            Mensajes.TipoMensaje.ERROR);
                    this.libro = null;
                }

                // Rellenamos los campos con los datos de la variable de instancia
                // y desactivamos el modo de edición del formulario
                rellenarCampos(this.libro);
                activarEdicion(false);
                modo = ModoEdicion.LECTURA;

                // Eliminamos el valor del campo de búsqueda de ISBN
                txtBuscarISBN.setText("");

            } else {

                // Si el formulario no está en modo añadir, es una actualización.
                // Actualizamos los datos del libro y guardamos el resultado
                // en una variable                
                Resultado datos = baseDatos.actualizarLibro(libro);

                // Comprobamos si la operación se ha realizado correctamente
                if (datos.isOperacionCorrecta()) {

                    // Si es así, mostramos un mensaje al respecto
                    Mensajes.mostrarMensaje("El libro se ha actualizado correctamente", Mensajes.TipoMensaje.INFORMACION);

                } else {
                    // Si han sucedido errores, mostramos un mensaje y anulamos 
                    // la variable de instancia
                    Mensajes.mostrarMensaje(datos.getMensaje(), Mensajes.TipoMensaje.ERROR);
                    this.libro = null;
                }

                // Rellenamos los campos con los valores de la variable de 
                // instancia y desactivamos el modo de edición
                rellenarCampos(this.libro);
                activarEdicion(false);
                modo = ModoEdicion.LECTURA;

                // Eliminamos el valor del campo de búsqueda de ISBN
                txtBuscarISBN.setText("");

            }
        } else {
            // Si no son datos correctos, mostramos un mensaje al respecto
            errores = "%s%n".concat(errores);
            Mensajes.mostrarMensaje(String.format(
                    errores, "Introduzca valores correctos para continuar"),
                    Mensajes.TipoMensaje.AVISO);
        }

    }//GEN-LAST:event_btnAceptarActionPerformed

    /**
     * Evento para la pulsación del botón de exploración de autores
     *
     * @param evt Evento
     */
    private void btnBrowseAutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseAutoresActionPerformed

        // Creamos un objeto DialogMultiSelect pasándole los valores necesarios
        // Paramos null como ventana padre, verdadero para que sea una ventana
        // modal y los valores de autores si la varible de instancia no es nula
        DialogoMultiSelect dialog = new DialogoMultiSelect(null, true, (this.libro != null ? libro.getAutores() : null));

        // Hacemos que el formulario se posicione en relación al formulario
        // de libros y lo hacemos visible
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        // Comprobamos si se han seleccionado autores en el formulario        
        if (dialog.getSeleccion().length > 0) {

            // Si se han seleccionado autores creamos una variable para
            // concatenar los identificadores
            String ids = "";

            // Iteramos por todos los registros seleccionados
            for (String idAutor : dialog.getSeleccion()) {

                // Y concatenamos los identificadores, separándolos con una coma
                ids = ids.concat(idAutor).concat(",");
            }

            // Quitamos la coma final tras las concatenación
            ids = ids.substring(0, ids.length() - 1);

            // Asginamos las ids a la etiqueta oculta para tal efecto
            lblIdAutores.setText(ids);

            // Asignamos al cuadro de texto de autores los nombres de estos tras
            // buscarlos en la base de datos
            txtAutor.setText(baseDatos.consultaNombreAutor(dialog.getSeleccion()));
        }


    }//GEN-LAST:event_btnBrowseAutoresActionPerformed

    /**
     * Evento para la pulsación del botón de cancelar
     *
     * @param evt Evento
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        // Rellenamos los campos del formulario con los valores de la variable
        // de instancia
        rellenarCampos(this.libro);

        // Desactivamos la edición en el formulario
        activarEdicion(false);

        // Cambiamos el modo de edición a lectura
        this.modo = ModoEdicion.LECTURA;

        // Eliminamos el valor del campo de búsqueda de ISBN
        txtBuscarISBN.setText("");
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        // Comprobamos si la variable de instancia no es nula
        // Si no es nula, tenemos valores y podemos modificarlos
        if (this.libro != null) {

            // Cambiamos el modo del formulario
            this.modo = ModoEdicion.MODIFICAR;

            // Rellenamos los campos del formulario con los valores de la variable
            // de instancia            
            rellenarCampos(libro);

            // Activamos el modo de edición
            activarEdicion(true);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Evento para la pulsación del botón de eliminar
     *
     * @param evt Evento
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        // Comprobamos si la variable de instancia no es nula
        // Si no es nula, tenemos valores y podemos eliminar el libro
        if (libro != null) {

            // Mostramos un mensaje pidiendo confirmación al usuario
            if (Mensajes.pedirConfirmacion(
                    String.format("%s%n¿Desea borrar este libro?",
                            libro.getTitulo()))) {

                // Si el usuario confirma, eliminamos el libro y guardamos el 
                // resultado de la consulta en una variable
                Resultado datos = baseDatos.eliminar(
                        new String[]{"Titulos"},
                        new String[]{"ISBN = '" + libro.getIsbn() + "'"});

                // Verificamos si la operación es corracta
                if (datos.isOperacionCorrecta()) {

                    // Si es correcta, mostramos un mensaje a tal efecto y 
                    // borramos los campos del formulario
                    Mensajes.mostrarMensaje("El libro se ha borrado correctamente",
                            Mensajes.TipoMensaje.INFORMACION);

                    rellenarCampos(null);
                } else {

                    // Si la operación no es correcta, mostramos un mensaje de 
                    // error
                    Mensajes.mostrarMensaje(datos.getMensaje(),
                            Mensajes.TipoMensaje.ERROR);
                }
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Método para rellenar los campos del formulario
     *
     * @param datosLibro Datos a mostrar en el formulario
     */
    private void rellenarCampos(Libro datosLibro) {

        // Si el parámetro es nulo, ponemos los campos en blanco
        if (datosLibro == null) {
            txtaResumen.setText("");
            txtAnyo.setText("");
            txtAutor.setText("");
            txtEdicion.setText("");
            txtEditorial.setText("");
            txtISBN.setText("");
            txtTitulo.setText("");
            lblIdAutores.setText("");
            cmbGenero.setSelectedIndex(-1);
            txtaResumen.setText("");
            lblBytesCaratula.setText("");

            try {
                lblCaratula.setIcon(new ImageIcon(ImageIO.read(getClass().getClassLoader().getResourceAsStream("images/no_book.png"))));
            } catch (IOException ex) {
                Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
            }

        } else {

            // Si el parámetro tiene valores, rellenamos los campos con ellos
            txtaResumen.setText("");
            txtAnyo.setText(datosLibro.getCopyright());
            txtEdicion.setText(String.valueOf(datosLibro.getNumEdicion()));
            txtEditorial.setText(datosLibro.getEditorial());
            txtISBN.setText(datosLibro.getIsbn());
            txtTitulo.setText(datosLibro.getTitulo());
            cmbGenero.setSelectedIndex(-1);
            txtaResumen.setText(datosLibro.getResumen());

            String ids = "";

            // Concatenamos los ids del autores
            if (datosLibro.getAutores() != null) {
                for (String idAutor : datosLibro.getAutores()) {
                    ids = ids.concat(idAutor).concat(",");
                }

                // Limpiamos la concatenación
                ids = ids.substring(0, ids.length() - 1);

                // Asignamos los ids a la etiqueta oculta, y los nombres
                // al cuadro de texto visible
                lblIdAutores.setText(ids);
                txtAutor.setText(baseDatos.consultaNombreAutor(datosLibro.getAutores()));
            }

            // Comprobamos que el libro trae datos de carátula
            if (datosLibro.getImagen() != null && !datosLibro.getImagen().equals("")) {

                try {
                    // Transformamos la cadena en base 64 de la carátula
                    // a una imagen
                    BufferedImage imagen = Utiles.stringBase64ToImage(datosLibro.getImagen());

                    // Redimensionamos la imágen para que se ajuste a la etiqueta
                    // de la carátula sin modificar su tamaño
                    imagen = Utiles.scaleImage(imagen, BufferedImage.TYPE_INT_RGB, 144, 219);

                    // Finalmente asignamos la imagen a la etiqueta
                    lblCaratula.setIcon(new ImageIcon(imagen));

                    // Y asignamos la cadena en base64 a la etiqueta correspondiente
                    lblBytesCaratula.setText(datosLibro.getImagen());
                } catch (IOException ex) {
                    // Si se produce un error, anulamos la caráula y mostramos un mensaje
                    lblCaratula.setIcon(null);
                    Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
                }
            }
        }
    }

    /**
     * Evento para la pulsación del botón de añadir
     *
     * @param evt Evento
     */
    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed

        // Limpiamos la variable de instancia
        this.libro = null;

        // Cambiamos el modo del formulario
        this.modo = ModoEdicion.AÑADIR;

        // Limpiamos los campos y activamos el modo de edición
        rellenarCampos(libro);
        activarEdicion(true);
    }//GEN-LAST:event_btnAñadirActionPerformed

    /**
     * Evento para la pulsación del ratón en la carátula
     *
     * @param evt Evento
     */
    private void lblCaratulaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCaratulaMouseClicked

        // Comprobamos que el formulario está en modo edición o añadir
        if (modo != ModoEdicion.LECTURA) {
            // Comprobamos si es un doble click buscando el número de clicks
            // en el evento
            if (evt.getClickCount() == 2) {

                try {
                    // Creamos un objeto JFileChooser
                    JFileChooser fc = new JFileChooser();

                    // Le asignamos un título a la ventana de selección
                    fc.setDialogTitle("Seleccione una imágen...");

                    // Especificamos el filtro de ficheros a seleccionar
                    FileNameExtensionFilter filter
                            = new FileNameExtensionFilter("Imágenes JPG ", "jpg");

                    // Aplicamos el filtro a la ventana de selección
                    fc.setFileFilter(filter);

                    // Mostramos la ventana de selección y guardamos el código de 
                    // resultado de la seleccion
                    int returnVal = fc.showDialog(this, "Aceptar");

                    // Comprobamos si se ha pulsado el botón de aceptar
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        // Cargamos el fichero a un objeto File
                        File file = fc.getSelectedFile();

                        // Guardamos la imágen a un objeto Image
                        BufferedImage image = ImageIO.read(file);

                        // Redimensionamos la imagen para que se ajuste al tamaño de la etiqueta
                        // sin modificar su tamaño
                        image = Utiles.scaleImage(image, BufferedImage.TYPE_INT_RGB, 144, 219);

                        // Y lo cargamos en el label de la carátula convierténdolo
                        // en ImageIcon
                        lblCaratula.setIcon(new ImageIcon(image));

                        // Asignamos el fichero seleccionado a como una cadena en base 64
                        // a una etiqueta oculta
                        lblBytesCaratula.setText(Utiles.fileToBase64String(fc.getSelectedFile()));

                    }

                } catch (IOException ex) {

                    // Si se produce un error, mostramos el mesaje al usuario
                    Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
                }
            }
        }
    }//GEN-LAST:event_lblCaratulaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnBrowseAutores;
    private javax.swing.JButton btnBuscarISBN;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox cmbGenero;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAnyo;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblBytesCaratula;
    private javax.swing.JLabel lblCaratula;
    private javax.swing.JLabel lblEdicion;
    private javax.swing.JLabel lblEditorial;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblIdAutores;
    private javax.swing.JLabel lblIsbn;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlPrincipal;
    private javax.swing.JTextField txtAnyo;
    private javax.swing.JTextField txtAutor;
    private javax.swing.JTextField txtBuscarISBN;
    private javax.swing.JTextField txtEdicion;
    private javax.swing.JTextField txtEditorial;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextArea txtaResumen;
    // End of variables declaration//GEN-END:variables
}
