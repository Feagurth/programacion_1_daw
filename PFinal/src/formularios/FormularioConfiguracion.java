/*
 * Copyright (C) 2014 Luis Cabrerizo Gómez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package formularios;

import datos.BaseDeDatos;
import datos.Configuracion;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import utiles.Mensajes;
import utiles.Validaciones;

/**
 * Formulario para gestionar la configuración del programa
 *
 * @author Luis Cabrerizo Gómez
 */
public class FormularioConfiguracion extends javax.swing.JInternalFrame {

    /**
     * Crea un nuevo formulario FormularioConfiguración
     */
    public FormularioConfiguracion() {
        initComponents();

        // Intentamos cargar los datos del fichero de configuración
        try {
            // Creamos un objeto de configuración y pillamos una instancia
            Configuracion config = Configuracion.getConfiguracion();

            // Cargamos los campos de texto a traves de los valores de la configuración
            txtDirección.setText(config.getDireccion());
            txtNombre.setText(config.getNombre());
            txtPuerto.setText(config.getPuerto());
            txtUsuario.setText(config.getUsuario());
            txtPassword.setText(config.getPassword());

        } catch (IOException ex) {
            // Si salta una excepción mostramos un mensaje de error
            Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblDireccion = new javax.swing.JLabel();
        txtDirección = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblPuerto = new javax.swing.JLabel();
        txtPuerto = new javax.swing.JTextField();
        lblUsuario = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnGuarda = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Base de Datos"));

        lblDireccion.setText("Dirección: ");

        lblNombre.setText("Nombre: ");

        lblPuerto.setText("Puerto: ");

        lblUsuario.setText("Usuario: ");

        lblPassword.setText("Contraseña: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPassword)
                        .addGap(1, 1, 1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPuerto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtUsuario, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDirección, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPassword))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDirección, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPuerto)
                    .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGuarda.setText("Guardar Cambios");
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGuarda)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuarda)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para la pulsación del botón de guardar cambios
     *
     * @param evt
     */
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed

        // Creamos una variable para almacenar errores y validamos los datos
        String errores = validarDatos();

        // Si la cadena de errores no tiene contenido, la validación es correcta
        if (errores.equals("")) {
            try {
                // Comprobamos si podemos conectar a la base de datos
                if (BaseDeDatos.comprobarAcceso(txtUsuario.getText(), new String(txtPassword.getPassword()), txtDirección.getText(), txtPuerto.getText(), txtNombre.getText())) {

                    // Creamos una instancia de configuración
                    Configuracion config = Configuracion.getConfiguracion();

                    // Asignamos sus valores a partir de los cuadros de texto
                    config.setDireccion(txtDirección.getText());
                    config.setNombre(txtNombre.getText());
                    config.setPuerto(txtPuerto.getText());
                    config.setUsuario(txtUsuario.getText());
                    config.setPassword(new String(txtPassword.getPassword()));

                    // Si todo es correcto, guardamos la configuración a fichero
                    config.guardarConfiguracion();

                    // Y mostramos un mensaje de confirmación
                    Mensajes.mostrarMensaje("Configuración guardada correctamente",
                            Mensajes.TipoMensaje.INFORMACION);
                } else {
                    // Si no hay conexión con la base de datos, mostramos un mensaje
                    Mensajes.mostrarMensaje("No hay conexión con la base de datos\n"
                            + "Modifique los parámetros de configuración.",
                            Mensajes.TipoMensaje.AVISO);

                }

            } catch (IOException | NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
                // Si durante el proceso tenemos una excepción mostramos un mensaje de error
                Mensajes.mostrarMensaje(ex.getMessage(), Mensajes.TipoMensaje.ERROR);
            }

        } else {
            // Si hay errores, se los mostramos al usuario
            Mensajes.mostrarMensaje(errores, Mensajes.TipoMensaje.AVISO);
        }

    }//GEN-LAST:event_btnGuardaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuarda;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPuerto;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTextField txtDirección;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPuerto;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para validar los datos de la pantalla de configuración
     *
     * @return Una cadena vacía si no hay errores, o una cadena con los errores
     * a subsanar
     */
    private String validarDatos() {
        String salida = "";

        // Validamos la dirección y si no es corracta concatenamos una cadena de error a la
        // variable de salida
        if (!Validaciones.validarDato(txtDirección.getText(), Validaciones.TipoValidacion.IP)) {
            salida = salida.concat("Dirección: Introduzca una dirección ip válida.");
        }

        // Validamos el puerto y si no es corracta concatenamos una cadena de error a la
        // variable de salida
        if (!Validaciones.validarDato(txtPuerto.getText(), Validaciones.TipoValidacion.ENTERO_POSITIVO_NO_0)) {
            salida = salida.concat("Puerto: Introduzca un número de puerto positivo distinto de cero");
        }

        // Validamos el rango máximo del puerto y si no es corracta 
        // concatenamos una cadena de error a la variable de salida
        if (Integer.parseInt(txtPuerto.getText()) > 65536) {
            salida = salida.concat("Puerto: Introduzca un valor entre 1 y 65536");
        }

        // Validamos el nombre de usuario y si no es corracta concatenamos una 
        // cadena de error a la variable de salida        
        if (!Validaciones.validarDato(txtNombre.getText(), Validaciones.TipoValidacion.CADENA_SOLO_LETRAS_NUMEROS)) {
            salida = salida.concat("Usuario: Introduzca un nombre de usuario válido");
        }

        // Verificamos si la contraseña está vacía
        if (!new String(txtPassword.getPassword()).equals("")) {
            // Si no lo está la validamos y si da error, concatenamos mensaje de error
            if (!Validaciones.validarDato(new String(txtPassword.getPassword()), Validaciones.TipoValidacion.CADENA_SOLO_LETRAS_NUMEROS)) {
                salida = salida.concat("Contraseña: Introduzca una contraseña válida");
            }
        }

        return salida;

    }
}
